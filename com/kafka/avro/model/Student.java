/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.avro.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"com.kafka.avro.model\",\"fields\":[{\"name\":\"studentName\",\"type\":\"string\"},{\"name\":\"studentId\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence studentName;
  @Deprecated public java.lang.CharSequence studentId;
  @Deprecated public int age;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Student() {}

  /**
   * All-args constructor.
   */
  public Student(java.lang.CharSequence studentName, java.lang.CharSequence studentId, java.lang.Integer age) {
    this.studentName = studentName;
    this.studentId = studentId;
    this.age = age;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studentName;
    case 1: return studentId;
    case 2: return age;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studentName = (java.lang.CharSequence)value$; break;
    case 1: studentId = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'studentName' field.
   */
  public java.lang.CharSequence getStudentName() {
    return studentName;
  }

  /**
   * Sets the value of the 'studentName' field.
   * @param value the value to set.
   */
  public void setStudentName(java.lang.CharSequence value) {
    this.studentName = value;
  }

  /**
   * Gets the value of the 'studentId' field.
   */
  public java.lang.CharSequence getStudentId() {
    return studentId;
  }

  /**
   * Sets the value of the 'studentId' field.
   * @param value the value to set.
   */
  public void setStudentId(java.lang.CharSequence value) {
    this.studentId = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /** Creates a new Student RecordBuilder */
  public static com.kafka.avro.model.Student.Builder newBuilder() {
    return new com.kafka.avro.model.Student.Builder();
  }
  
  /** Creates a new Student RecordBuilder by copying an existing Builder */
  public static com.kafka.avro.model.Student.Builder newBuilder(com.kafka.avro.model.Student.Builder other) {
    return new com.kafka.avro.model.Student.Builder(other);
  }
  
  /** Creates a new Student RecordBuilder by copying an existing Student instance */
  public static com.kafka.avro.model.Student.Builder newBuilder(com.kafka.avro.model.Student other) {
    return new com.kafka.avro.model.Student.Builder(other);
  }
  
  /**
   * RecordBuilder for Student instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private java.lang.CharSequence studentName;
    private java.lang.CharSequence studentId;
    private int age;

    /** Creates a new Builder */
    private Builder() {
      super(com.kafka.avro.model.Student.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.kafka.avro.model.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studentName)) {
        this.studentName = data().deepCopy(fields()[0].schema(), other.studentName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.studentId)) {
        this.studentId = data().deepCopy(fields()[1].schema(), other.studentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Student instance */
    private Builder(com.kafka.avro.model.Student other) {
            super(com.kafka.avro.model.Student.SCHEMA$);
      if (isValidValue(fields()[0], other.studentName)) {
        this.studentName = data().deepCopy(fields()[0].schema(), other.studentName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.studentId)) {
        this.studentId = data().deepCopy(fields()[1].schema(), other.studentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'studentName' field */
    public java.lang.CharSequence getStudentName() {
      return studentName;
    }
    
    /** Sets the value of the 'studentName' field */
    public com.kafka.avro.model.Student.Builder setStudentName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.studentName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'studentName' field has been set */
    public boolean hasStudentName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'studentName' field */
    public com.kafka.avro.model.Student.Builder clearStudentName() {
      studentName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'studentId' field */
    public java.lang.CharSequence getStudentId() {
      return studentId;
    }
    
    /** Sets the value of the 'studentId' field */
    public com.kafka.avro.model.Student.Builder setStudentId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.studentId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'studentId' field has been set */
    public boolean hasStudentId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'studentId' field */
    public com.kafka.avro.model.Student.Builder clearStudentId() {
      studentId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public com.kafka.avro.model.Student.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'age' field */
    public com.kafka.avro.model.Student.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Student build() {
      try {
        Student record = new Student();
        record.studentName = fieldSetFlags()[0] ? this.studentName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.studentId = fieldSetFlags()[1] ? this.studentId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
